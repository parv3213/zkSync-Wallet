[{"/Users/parv/Documents/Current/Somish/Padlock/zksync-react/src/App.jsx":"1","/Users/parv/Documents/Current/Somish/Padlock/zksync-react/src/index.js":"2"},{"size":6167,"mtime":1612248868786,"results":"3","hashOfConfig":"4"},{"size":363,"mtime":1611914977674,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"147a3ni",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/parv/Documents/Current/Somish/Padlock/zksync-react/src/App.jsx",["11","12"],"import React, { useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport { ethers } from \"ethers\";\nimport * as zksync from \"zksync\";\n\nexport default function App() {\n\tconst [web3, setWeb3] = useState(undefined);\n\tconst [account, setAccount] = useState(\"\");\n\tconst [syncWallet, setSyncWallet] = useState(undefined);\n\tconst [syncHTTPProvider, setSyncHTTPProvider] = useState(undefined);\n\tconst [committedEthBalance, setCommittedEthBalance] = useState(undefined);\n\tconst [verifiedEthBalance, setVerifiedEthBalance] = useState(undefined);\n\n\tconst getWeb3 = () => {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tif (window.ethereum) {\n\t\t\t\tconst web3 = new Web3(window.ethereum);\n\t\t\t\ttry {\n\t\t\t\t\tawait window.ethereum.enable();\n\t\t\t\t\tresolve(web3);\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t} else if (window.web3) {\n\t\t\t\tresolve(window.web3);\n\t\t\t} else {\n\t\t\t\twindow.alert(\"Must install Metamask Extension!\\nDApp will not load\");\n\t\t\t\treject(\"Must install Metamask Extension!\");\n\t\t\t}\n\t\t});\n\t};\n\n\tconst zkSyncInitialize = async (web3) => {\n\t\tawait web3.currentProvider.enable();\n\t\tconst ethersProvider = new ethers.providers.Web3Provider(web3.currentProvider);\n\t\tconst syncHTTPProvider = await zksync.Provider.newHttpProvider(\"https://rinkeby-api.zksync.io/jsrpc\");\n\t\tconst singer = ethersProvider.getSigner();\n\t\tconst syncWallet = await zksync.Wallet.fromEthSigner(singer, syncHTTPProvider);\n\t\tconsole.log(syncWallet);\n\t\treturn ({syncWallet, syncHTTPProvider})\n\t};\n\n\tconst signKey = async (syncWallet) => {\n\t\tconsole.log(`User account status: ${await syncWallet.isSigningKeySet()}`);\n\t\tif (!(await syncWallet.isSigningKeySet())) {\n\t\t\tconsole.log(\"Setting singing key\");\n\t\t\tconst changePubkey = await syncWallet.setSigningKey({\n\t\t\t\tfeeToken: \"ETH\",\n\t\t\t});\n\t\t\t// Wait till transaction is committed\n\t\t\tconst receipt = await changePubkey.awaitReceipt();\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tconst init = async () => {\n\t\t\tconst web3 = await getWeb3();\n\t\t\tconst account = (await web3.eth.getAccounts())[0];\n\t\t\tconst {syncWallet, syncHTTPProvider} = await zkSyncInitialize(web3)\n\t\t\tsetWeb3(web3);\n\t\t\tsetAccount(account);\n\t\t\tsetSyncWallet(syncWallet);\n\t\t\tsetSyncHTTPProvider(syncHTTPProvider);\n\t\t\tsignKey(syncWallet);\n\t\t};\n\t\tinit();\n\t}, []);\n\n\tconst deposit = async () => {\n\t\t// Depositing assets from Ethereum into zkSync\n\t\tconst deposit = await syncWallet.depositToSyncFromEthereum({\n\t\t\tdepositTo: syncWallet.address(),\n\t\t\ttoken: \"ETH\",\n\t\t\tamount: ethers.utils.parseEther(\"0.1\"),\n\t\t});\n\n\t\t// Await confirmation from the zkSync operator\n\t\t// Completes when a promise is issued to process the tx\n\t\tlet depositReceipt = await deposit.awaitReceipt();\n\t\tconsole.log(depositReceipt);\n\n\t\t// Await verification\n\t\t// Completes when the tx reaches finality on Ethereum\n\t\tdepositReceipt = await deposit.awaitVerifyReceipt();\n\t\tconsole.log(depositReceipt);\n\t};\n\n\tconst checkStatus = async () => {\n\t\tconst state = await syncWallet.getAccountState();\n\t\tconsole.log(state);\n\t\tsetCommittedEthBalance(state.committed.balances.ETH);\n\t\tsetVerifiedEthBalance(state.verified.balances.ETH);\n\t};\n\n\tconst withdraw = async () => {\n\t\t// withdraw money back to Ethereum\n\t\tconst withdraw = await syncWallet.withdrawFromSyncToEthereum({\n\t\t\tethAddress: syncWallet.address(),\n\t\t\ttoken: \"ETH\",\n\t\t\tamount: ethers.utils.parseEther(\"0.1\"),\n\t\t});\n\t\tconst withdrawReceipt = await withdraw.awaitReceipt();\n\t\tconsole.log(withdrawReceipt);\n\t\tawait withdraw.awaitVerifyReceipt();\n\t};\n\n\tconst transfer = async () => {\n\t\tconst amount = zksync.utils.closestPackableTransactionAmount(ethers.utils.parseEther(\"0.1\"));\n\t\t// const fee = zksync.utils.closestPackableTransactionFee(ethers.utils.parseEther(\"0.001\"));\n\t\t// transfer eth to another account\n\t\tconst transfer = await syncWallet.syncTransfer({\n\t\t\tto: \"0x6C12a705de85a44EAE07fCfb2932Db9Fd1ca1df6\",\n\t\t\ttoken: \"ETH\",\n\t\t\tamount,\n\t\t});\n\t\t// track the transfer status\n\t\tconst transferReceipt = await transfer.awaitReceipt();\n\t\tconsole.log(transferReceipt);\n\t};\n\n\tconst allTokens = async () => {\n\t\tconsole.log(await syncHTTPProvider.getTokens());\n\t};\n\n\tconst unlockTokens = async () => {\n\t\tconsole.log(await syncWallet.isERC20DepositsApproved(\"0xeb8f08a975ab53e34d8a0330e0d34de942c95926\"));\n\t\tconst unlock = await syncWallet.approveERC20TokenDeposits(\"0xeb8f08a975ab53e34d8a0330e0d34de942c95926\");\n\t\tconsole.log(unlock);\n\t};\n\n\tconst depositUSDC = async () => {\n\t\tconst depositPriorityOperation = await syncWallet.depositToSyncFromEthereum({\n\t\t\tdepositTo: account,\n\t\t\ttoken: \"0xeb8f08a975ab53e34d8a0330e0d34de942c95926\",\n\t\t\tamount: String(10e6),\n\t\t});\n\t\t// Wait till priority operation is committed.\n\t\tconst priorityOpReceipt = await depositPriorityOperation.awaitReceipt();\n\t\tconsole.log(priorityOpReceipt);\n\t};\n\n\tconst transferUSDC = async () => {\n\t\tconst amount = zksync.utils.closestPackableTransactionAmount(10e6);\n\t\t// const fee = zksync.utils.closestPackableTransactionFee(ethers.utils.parseEther(\"0.001\"));\n\t\t// transfer eth to another account\n\t\tconst transfer = await syncWallet.syncTransfer({\n\t\t\tto: \"0x6C12a705de85a44EAE07fCfb2932Db9Fd1ca1df6\",\n\t\t\ttoken: \"0xeb8f08a975ab53e34d8a0330e0d34de942c95926\",\n\t\t\tamount,\n\t\t});\n\t\t// track the transfer status\n\t\tconst transferReceipt = await transfer.awaitReceipt();\n\t\tconsole.log(transferReceipt);\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t{syncWallet === undefined ? (\n\t\t\t\t<button onClick={zkSyncInitialize}>Initialize</button>\n\t\t\t) : (\n\t\t\t\t<div>\n\t\t\t\t\t<p>Sync wallet connected</p>\n\t\t\t\t\t<br />\n\t\t\t\t\t<button onClick={checkStatus}>Check Account State</button>\n\t\t\t\t\t<button onClick={deposit}>Deposit 0.1 ETH</button>\n\t\t\t\t\t<button onClick={withdraw}>Withdraw 0.1 ETH</button>\n\t\t\t\t\t<button onClick={transfer}>transfer 0.1 ETH</button>\n\t\t\t\t\t<button onClick={allTokens}>Check all tokens</button>\n\t\t\t\t\t<button onClick={unlockTokens}>Unlock USDC</button>\n\t\t\t\t\t<button onClick={depositUSDC}>Deposit 10 USDC</button>\n\t\t\t\t\t<button onClick={transferUSDC}>Transfer 10 USDC</button>\n\t\t\t\t\t<br />\n\t\t\t\t\t<p>Committed Balance: {committedEthBalance === undefined ? \"\" : committedEthBalance / 1e18}</p>\n\t\t\t\t\t<p>Verified Balance: {verifiedEthBalance === undefined ? \"\" : verifiedEthBalance / 1e18}</p>\n\t\t\t\t\t<p>{account}</p>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","/Users/parv/Documents/Current/Somish/Padlock/zksync-react/src/index.js",[],{"ruleId":"13","severity":1,"message":"14","line":7,"column":9,"nodeType":"15","messageId":"16","endLine":7,"endColumn":13},{"ruleId":"13","severity":1,"message":"17","line":51,"column":10,"nodeType":"15","messageId":"16","endLine":51,"endColumn":17},"no-unused-vars","'web3' is assigned a value but never used.","Identifier","unusedVar","'receipt' is assigned a value but never used."]